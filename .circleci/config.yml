version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  ruby: circleci/ruby@1.1.2
  node: circleci/node@4.2.0

jobs:
  build: # our first job, named "build"
    docker:
      - image: circleci/ruby:3.0.0-node # use a tailored CircleCI docker image.
        auth:
          username: docker-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout # pull down our git code.
      - ruby/install-deps # use the ruby orb to install dependencies
      # use the node orb to install our packages
      # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
      # learn more: https://circleci.com/docs/2.0/caching/

  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 1
    # here we set TWO docker images.
    docker:
      - image: circleci/ruby:3.0.0-node # this is our primary docker image, where step commands run.
        auth:
          username: docker-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
      - image: circleci/mysql:latest
        command: [--default-authentication-plugin=mysql_native_password]
        auth:
          username: docker-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment: # add MYSQL environment variables.
          MYSQL_USER: circleci-mysql
          MYSQL_DATABASE: compraagil_test
          MYSQL_ALLOW_EMPTY_PASSWORD: true
      - image: redis
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
        environment:
          - cluster.name: es-test-cluster
          - xpack.security.enabled: false
          - transport.host: 127.0.0.1
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      MYSQLHOST: 127.0.0.1
      MYSQL_USER: circleci-mysql
      MYSQL_ALLOW_EMPTY_PASSWORD: true
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - ruby/install-deps
      - restore_cache:
          name: Restore Bundle cache
          keys:
            - bundle-{{ checksum "Gemfile.lock" }}
            - bundle-
      - run:
          name: Install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          name: Save Bundle cache
          paths:
            - ./vendor/bundle
          key: bundle-{{ checksum "Gemfile.lock" }}
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: Database config setup
          command: cp config/database.example.yml config/database.yml
      - run:
          name: Database setup
          command: bundle exec rake db:drop db:create db:schema:load
      - run:
          name: Run tests
          command: |
            bundle exec rake db:migrate
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            bundle exec rspec --format progress \
                            --format RspecJunitFormatter -o /tmp/test-results/rspec.xml \
                            $TEST_FILES
      - store_test_results:
          path: /tmp/test-results


# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
